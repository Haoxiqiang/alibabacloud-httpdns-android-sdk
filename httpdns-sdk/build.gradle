apply plugin: 'com.android.library'

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"
    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 29
        versionCode 1
        if (project.hasProperty("VERSION_NAME")) {
            println "version name is $VERSION_NAME from mtl"
            versionName VERSION_NAME
        } else {
            println "version name is from gradle"
            versionName httpdnsDebugVersion
        }
        setProperty("archivesBaseName", "alicloud-android-httpdns-$versionName")
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        buildConfigField "String[]", "INIT_SERVER", INIT_SERVERS
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile("proguard-android.txt"), 'proguard-rules.pro'
        }

        forTest {
            initWith release
            debuggable true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules-for-test.pro'
        }
    }

    flavorDimensions "version"

    productFlavors {
        normal {

        }

        end2end {
            buildConfigField "String[]", "INIT_SERVER", "{}"
        }
    }

    variantFilter { variant ->
        def names = variant.flavors*.name
        def type = variant.buildType.name;
        // To check for a certain build type, use variant.buildType.name == "<buildType>"
        if ((names.contains("normal") && type.contains("forTest"))
                || (names.contains("end2end") && type.contains("release"))
                || (names.contains("end2end") && type.contains("debug"))
        ) {
            // Gradle ignores any variants that satisfy the conditions above.
            setIgnore(true)
        }
    }

    testOptions {
        unitTests {
            all {
                jvmArgs '-noverify'
                systemProperty 'robolectric.logging.enable', true
            }
        }
    }

    lintOptions {
        abortOnError false
    }
}

dependencies {

    compileOnly 'com.android.support:appcompat-v7:28.0.0'

    end2endImplementation "org.robolectric:robolectric:3.8"
    end2endImplementation 'junit:junit:4.12'
    end2endImplementation 'org.mockito:mockito-core:2.15.0'
    end2endImplementation 'com.squareup.okhttp3:mockwebserver:3.9.0'
    end2endImplementation 'com.android.support:appcompat-v7:28.0.0'

    androidTestImplementation 'com.android.support.test:runner:1.0.0'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.0'
    androidTestImplementation 'org.mockito:mockito-android:2.15.0'
    androidTestImplementation 'com.squareup.okhttp3:mockwebserver:3.9.0'
    androidTestImplementation 'com.android.support:appcompat-v7:28.0.0'

    implementation "com.aliyun.ams:alicloud-android-sender:${senderVersion}"
    implementation "com.aliyun.ams:alicloud-android-crashdefend:${crashDefendVersion}"
    implementation "com.aliyun.ams:alicloud-android-utdid:${utdidVersion}"
    implementation "com.aliyun.ams:alicloud-android-beacon:${beaconVersion}"
}

task copyAARForApp(type: Copy) {
    dependsOn 'assembleEnd2endForTest'
    from('build/outputs/aar')
    into('../app/libs')
    include("alicloud-android-httpdns-${httpdnsDebugVersion}-end2end-forTest.aar")
}

